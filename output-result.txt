
============================================================
🧪 PagedAttention 内存分配对比实验
🎯 目标：理解PagedAttention如何提高内存利用率
============================================================
🔍 检查实验环境...
🐍 Python版本: 3.12.3 (main, Jun 18 2025, 17:59:45) [GCC 13.3.0]
✅ 在虚拟环境中运行
✅ PyTorch版本: 2.7.0+cu126
✅ CUDA可用: True
📊 GPU数量: 1
   GPU 0: NVIDIA GeForce RTX 4090
✅ Transformers版本: 4.53.2
✅ vLLM版本: 0.9.2

==================================================
🔬 第一阶段：传统Transformers方法测试
💡 特点：逐个处理请求，按最大可能长度分配内存
==================================================
⏳ 正在运行传统方法测试...
⚠️  NVML不可用，使用PyTorch进行GPU监控
🔄 开始测试传统方法...

=== 初始状态 ===
时间: 13:21:47
🔥 GPU_0: 0.00GB allocated / 23.62GB total
--------------------------------------------------
📥 正在加载传统Transformers模型...

=== 模型加载完成 ===
时间: 13:21:49
🔥 GPU_0: 0.25GB allocated / 23.62GB total
--------------------------------------------------
📝 处理 4 个不同长度的输入...

📄 处理输入 1: 长度 6 字符
⏱️  生成时间: 0.46秒
📊 输出长度: 213 字符

=== 处理完输入 1 ===
时间: 13:21:49
🔥 GPU_0: 0.26GB allocated / 23.62GB total
--------------------------------------------------

📄 处理输入 2: 长度 57 字符
⏱️  生成时间: 0.15秒
📊 输出长度: 252 字符

=== 处理完输入 2 ===
时间: 13:21:50
🔥 GPU_0: 0.26GB allocated / 23.62GB total
--------------------------------------------------

📄 处理输入 3: 长度 680 字符
⏱️  生成时间: 0.15秒
📊 输出长度: 1005 字符

=== 处理完输入 3 ===
时间: 13:21:51
🔥 GPU_0: 0.26GB allocated / 23.62GB total
--------------------------------------------------

📄 处理输入 4: 长度 7 字符
⏱️  生成时间: 0.15秒
📊 输出长度: 197 字符

=== 处理完输入 4 ===
时间: 13:21:53
🔥 GPU_0: 0.26GB allocated / 23.62GB total
--------------------------------------------------

✅ 传统方法测试完成!
🕒 总耗时: 0.91秒
📈 平均每个请求: 0.23秒

✅ 传统方法测试完成

==================================================
⏸️  按Enter键继续测试vLLM PagedAttention方法...

==================================================
🔬 第二阶段：vLLM PagedAttention方法测试
💡 特点：批量处理，分页管理KV-Cache，按需分配内存
==================================================
⏳ 正在运行vLLM方法测试...
⚠️  NVML不可用，使用PyTorch进行GPU监控
🔄 开始测试vLLM方法...

=== 初始状态 ===
时间: 13:22:03
🔥 GPU_0: 0.00GB allocated / 23.62GB total
--------------------------------------------------
INFO 07-20 13:22:05 [__init__.py:244] Automatically detected platform cuda.
✅ vLLM导入成功
📥 正在加载vLLM模型...
INFO 07-20 13:22:10 [config.py:841] This model supports multiple tasks: {'classify', 'generate', 'embed', 'reward'}. Defaulting to 'generate'.
INFO 07-20 13:22:10 [config.py:3368] Downcasting torch.float32 to torch.bfloat16.
INFO 07-20 13:22:10 [config.py:1472] Using max model len 512
INFO 07-20 13:22:11 [config.py:2285] Chunked prefill is enabled with max_num_batched_tokens=8192.
WARNING 07-20 13:22:11 [__init__.py:2662] We must use the `spawn` multiprocessing start method. Overriding VLLM_WORKER_MULTIPROC_METHOD to 'spawn'. See https://docs.vllm.ai/en/latest/usage/troubleshooting.html#python-multiprocessing for more information. Reason: CUDA is initialized
INFO 07-20 13:22:13 [__init__.py:244] Automatically detected platform cuda.
INFO 07-20 13:22:14 [core.py:526] Waiting for init message from front-end.
INFO 07-20 13:22:14 [core.py:69] Initializing a V1 LLM engine (v0.9.2) with config: model='gpt2', speculative_config=None, tokenizer='gpt2', skip_tokenizer_init=False, tokenizer_mode=auto, revision=None, override_neuron_config={}, tokenizer_revision=None, trust_remote_code=True, dtype=torch.bfloat16, max_seq_len=512, download_dir=None, load_format=LoadFormat.AUTO, tensor_parallel_size=1, pipeline_parallel_size=1, disable_custom_all_reduce=False, quantization=None, enforce_eager=False, kv_cache_dtype=auto,  device_config=cuda, decoding_config=DecodingConfig(backend='auto', disable_fallback=False, disable_any_whitespace=False, disable_additional_properties=False, reasoning_backend=''), observability_config=ObservabilityConfig(show_hidden_metrics_for_version=None, otlp_traces_endpoint=None, collect_detailed_traces=None), seed=0, served_model_name=gpt2, num_scheduler_steps=1, multi_step_stream_outputs=True, enable_prefix_caching=True, chunked_prefill_enabled=True, use_async_output_proc=True, pooler_config=None, compilation_config={"level":3,"debug_dump_path":"","cache_dir":"","backend":"","custom_ops":[],"splitting_ops":["vllm.unified_attention","vllm.unified_attention_with_output"],"use_inductor":true,"compile_sizes":[],"inductor_compile_config":{"enable_auto_functionalized_v2":false},"inductor_passes":{},"use_cudagraph":true,"cudagraph_num_of_warmups":1,"cudagraph_capture_sizes":[512,504,496,488,480,472,464,456,448,440,432,424,416,408,400,392,384,376,368,360,352,344,336,328,320,312,304,296,288,280,272,264,256,248,240,232,224,216,208,200,192,184,176,168,160,152,144,136,128,120,112,104,96,88,80,72,64,56,48,40,32,24,16,8,4,2,1],"cudagraph_copy_inputs":false,"full_cuda_graph":false,"max_capture_size":512,"local_cache_dir":null}
INFO 07-20 13:22:15 [parallel_state.py:1076] rank 0 in world size 1 is assigned as DP rank 0, PP rank 0, TP rank 0, EP rank 0
WARNING 07-20 13:22:15 [topk_topp_sampler.py:59] FlashInfer is not available. Falling back to the PyTorch-native implementation of top-p & top-k sampling. For the best performance, please install FlashInfer.
INFO 07-20 13:22:15 [gpu_model_runner.py:1770] Starting to load model gpt2...
INFO 07-20 13:22:15 [gpu_model_runner.py:1775] Loading model from scratch...
INFO 07-20 13:22:15 [cuda.py:284] Using Flash Attention backend on V1 engine.
INFO 07-20 13:22:15 [weight_utils.py:292] Using model weights format ['*.safetensors']
INFO 07-20 13:22:16 [weight_utils.py:345] No model.safetensors.index.json found in remote.
Loading safetensors checkpoint shards:   0% Completed | 0/1 [00:00<?, ?it/s]
Loading safetensors checkpoint shards: 100% Completed | 1/1 [00:00<00:00, 13.56it/s]

INFO 07-20 13:22:16 [default_loader.py:272] Loading weights took 0.09 seconds
INFO 07-20 13:22:16 [gpu_model_runner.py:1801] Model loading took 0.2378 GiB and 0.942424 seconds
INFO 07-20 13:22:17 [backends.py:508] Using cache directory: /home/christina/.cache/vllm/torch_compile_cache/03f88f8d40/rank_0_0/backbone for vLLM's torch.compile
INFO 07-20 13:22:17 [backends.py:519] Dynamo bytecode transform time: 0.99 s
INFO 07-20 13:22:18 [backends.py:155] Directly load the compiled graph(s) for shape None from the cache, took 0.485 s
INFO 07-20 13:22:18 [monitor.py:34] torch.compile takes 0.99 s in total
INFO 07-20 13:22:19 [gpu_worker.py:232] Available KV cache memory: 18.10 GiB
INFO 07-20 13:22:19 [kv_cache_utils.py:716] GPU KV cache size: 527,328 tokens
INFO 07-20 13:22:19 [kv_cache_utils.py:720] Maximum concurrency for 512 tokens per request: 1029.94x
Capturing CUDA graph shapes: 100%|███████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████| 67/67 [00:13<00:00,  4.90it/s]
INFO 07-20 13:22:33 [gpu_model_runner.py:2326] Graph capturing finished in 14 secs, took 0.22 GiB
INFO 07-20 13:22:33 [core.py:172] init engine (profile, create kv cache, warmup model) took 16.33 seconds

=== vLLM模型加载完成 ===
时间: 13:22:33
🔥 GPU_0: 0.00GB allocated / 23.62GB total
--------------------------------------------------
📝 处理 4 个不同长度的输入...
🚀 vLLM的优势：批量处理所有请求！
Adding requests: 100%|███████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████| 4/4 [00:00<00:00, 1878.12it/s]
Processed prompts: 100%|█████████████████████████████████████████████████████████████████████████████████████████████| 4/4 [00:00<00:00, 47.01it/s, est. speed input: 1507.22 toks/s, output: 2354.91 toks/s]

=== 批量生成完成 ===
时间: 13:22:33
🔥 GPU_0: 0.00GB allocated / 23.62GB total
--------------------------------------------------

📄 输入 1: 'Hello!...'
📊 原文长度: 6 字符
📊 生成长度: 184 字符

📄 输入 2: 'How are you doing today? I hope everything is goin...'
📊 原文长度: 57 字符
📊 生成长度: 212 字符

📄 输入 3: 'Tell me a story about artificial intelligence and ...'
📊 原文长度: 680 字符
📊 生成长度: 261 字符

📄 输入 4: 'Thanks!...'
📊 原文长度: 7 字符
📊 生成长度: 211 字符

✅ vLLM方法测试完成!
🕒 总生成时间: 0.09秒
📈 平均每个请求: 0.02秒
🔥 核心优势: 批量处理，内存使用更稳定，支持PagedAttention!
[rank0]:[W720 13:22:33.938021773 ProcessGroupNCCL.cpp:1476] Warning: WARNING: destroy_process_group() was not called before program exit, which can leak resources. For more info, please see https://pytorch.org/docs/stable/distributed.html#shutdown (function operator())

✅ vLLM方法测试完成

============================================================
🎉 实验完成！PagedAttention原理解析
============================================================

🔍 关键观察点:
1. 💾 GPU内存使用模式:
   • 传统方法：每个序列按最大长度分配，存在内存浪费
   • PagedAttention：按实际需要分页分配，内存利用率更高

2. 📊 内存使用稳定性:
   • 传统方法：内存使用随输入长度波动大
   • PagedAttention：内存使用更平稳，预测性更好

3. ⚡ 处理效率:
   • 传统方法：逐个处理请求
   • PagedAttention：支持高效批量处理

💡 PagedAttention的核心创新:
🔹 将KV-Cache分割成固定大小的页面(pages)
🔹 按需分配页面，避免预先分配大块连续内存
🔹 支持动态的内存管理和更好的内存碎片处理
🔹 使得变长序列的批处理成为可能

🎯 实际意义:
📈 在相同硬件上支持更大的批处理大小
💰 降低推理服务的硬件成本
🚀 提高模型服务的吞吐量
